# StudyGuru Pro - Environment Configuration Example
# Copy this file to .env and update the values with your actual configuration

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
PORT=8000
ENVIRONMENT=development
DISABLE_LOGS=true

# =============================================================================
# LLM MODEL CONFIGURATION
# =============================================================================
# Choose your AI model provider: "gpt" or "gemini"
LLM_MODEL=gpt

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
DATABASE_URL=mysql+asyncmy://root:password@localhost:3306/study_guru_pro

# =============================================================================
# JWT CONFIGURATION
# =============================================================================
JWT_SECRET_KEY=dev-secret-key-change-in-production

# =============================================================================
# CLIENT CONFIGURATION
# =============================================================================
CLIENT_ORIGIN=http://localhost:3000
SERVER_URL=http://localhost:5000
APP_LINK=studygurupro://open/

# =============================================================================
# EMAIL SMTP CONFIGURATION
# =============================================================================
SMTP_EMAIL_HOST=smtp.gmail.com
SMTP_EMAIL_PORT=587
SMTP_EMAIL_ADDRESS=test@example.com
SMTP_EMAIL_PASSWORD=password

# =============================================================================
# AWS S3 CONFIGURATION
# =============================================================================
AWS_ACCESS_KEY=test-key
SECRET_ACCESS_KEY=test-secret
AWS_S3_BUCKET=studyguru-pro
AWS_ORIGIN=ap-southeast-1

# =============================================================================
# PADDLE CONFIGURATION
# =============================================================================
PADDLE_API_KEY=test-key
PADDLE_WEBHOOK_SECRET=test-secret
PADDLE_ENVIRONMENT=sandbox

# =============================================================================
# AI MODEL API KEYS
# =============================================================================
# OpenAI API Key (required for GPT models)
OPENAI_API_KEY=your-openai-api-key-here

# Google Gemini API Key (required for Gemini models)
# Get your API key from: https://aistudio.google.com/
GOOGLE_API_KEY=your-google-api-key-here

# =============================================================================
# GOOGLE AUTHENTICATION
# =============================================================================
GOOGLE_CLIENT_ID=google-id

# =============================================================================
# FEATURE FLAGS
# =============================================================================
# Disable guardrail checks (set to "true" to disable)
DISABLE_GUARDRAIL=true

# Enable detailed logging (set to "true" to enable)
ENABLE_LOGS=false

# Enable enhanced document processing (set to "true" to enable)
ENABLE_ENHANCED_PROCESSING=false

# =============================================================================
# VECTOR DATABASE CONFIGURATION (Zilliz/Milvus)
# =============================================================================
# Zilliz Cloud URI (get from Zilliz Cloud console)
ZILLIZ_URI=your-zilliz-uri-here

# Zilliz Cloud Token (get from Zilliz Cloud console)
ZILLIZ_TOKEN=your-zilliz-token-here

# Database and collection names
ZILLIZ_DB_NAME=studyguru
ZILLIZ_COLLECTION=document_embeddings

# Vector configuration
ZILLIZ_DIMENSION=1536
ZILLIZ_INDEX_METRIC=IP
ZILLIZ_CONSISTENCY_LEVEL=Bounded

# =============================================================================
# ADVERTISEMENT CONFIGURATION
# =============================================================================
ADD_UNIT_ID_1=ca-app-pub-2962676217775659/5723259375

# =============================================================================
# MODEL CONFIGURATION NOTES
# =============================================================================
# 
# GPT Models (when LLM_MODEL=gpt):
# - Chat/Vision: gpt-4o
# - Guardrails/Titles: gpt-4o-mini  
# - Embeddings: text-embedding-3-small (1536 dimensions)
#
# Gemini Models (when LLM_MODEL=gemini):
# - Chat/Vision/Reasoning: gemini-2.5-pro
# - Guardrails/Titles: gemini-2.5-flash
# - Embeddings: models/embedding-001 (768 dimensions)
#
# =============================================================================
# SETUP INSTRUCTIONS
# =============================================================================
#
# 1. Copy this file to .env
# 2. Update all placeholder values with your actual configuration
# 3. Get OpenAI API key from: https://platform.openai.com/api-keys
# 4. Get Google API key from: https://aistudio.google.com/
# 5. Set up Zilliz Cloud account for vector database
# 6. Configure your database (MySQL recommended)
# 7. Set up AWS S3 for file storage
# 8. Configure Paddle for payments (optional)
#
# =============================================================================
# TESTING
# =============================================================================
#
# Test Gemini integration:
# python test_gemini_integration.py
#
# Test GPT integration:
# LLM_MODEL=gpt python test_gemini_integration.py
#
# =============================================================================

# =============================================================================
# VECTOR COLLECTION MANAGEMENT
# =============================================================================
#
# The system now uses separate collections for different embedding models:
# - GPT Collection: {ZILLIZ_COLLECTION}_gpt (1536 dimensions)
# - Gemini Collection: {ZILLIZ_COLLECTION}_gemini (768 dimensions)
#
# This ensures compatibility between different embedding models without
# requiring data migration when switching between GPT and Gemini.
#
# Collections are created automatically when first used, but you can also
# manage them manually using:
# python manage_vector_collections.py
#
# =============================================================================
